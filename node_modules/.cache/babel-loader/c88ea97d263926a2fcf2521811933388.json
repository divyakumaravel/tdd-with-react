{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\todomatic\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Form from \"./component/Form\";\nimport FilterButton from \"./component/FilterButton\";\nimport Todo from \"./component/Todo\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: [/*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/React/todomatic/src/App.js"],"names":["React","useState","Form","FilterButton","Todo","nanoid","App","props","tasks","setTasks","addTask","name","newTask","id","completed","toggleTaskCompleted","updatedTasks","map","task","taskList","tasksNoun","length","headingText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAElB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,KAAK,CAACC,KAAP,CAAlC;;AAEA,WAASE,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,UAAMC,OAAO,GAAG;AAAEC,MAAAA,EAAE,EAAE,UAAUR,MAAM,EAAtB;AAA0BM,MAAAA,IAAI,EAAEA,IAAhC;AAAsCG,MAAAA,SAAS,EAAE;AAAjD,KAAhB;AACAL,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,OAAX,CAAD,CAAR;AACD;;AAED,WAASG,mBAAT,CAA6BF,EAA7B,EAAiC;AAC/B,UAAMG,YAAY,GAAGR,KAAK,CAACS,GAAN,CAAUC,IAAI,IAAI;AACrC,UAAIL,EAAE,KAAKK,IAAI,CAACL,EAAhB,EAAoB;AAClB,eAAO,EAAE,GAAGK,IAAL;AAAWJ,UAAAA,SAAS,EAAE,CAACI,IAAI,CAACJ;AAA5B,SAAP;AACD;;AACD,aAAOI,IAAP;AACD,KALoB,CAArB;AAMAT,IAAAA,QAAQ,CAACO,YAAD,CAAR;AACD;;AAED,QAAMG,QAAQ,GAAGX,KAAK,CAACS,GAAN,CAAUC,IAAI,iBAC7B,QAAC,IAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACL,EADX;AAEE,IAAA,IAAI,EAAEK,IAAI,CAACP,IAFb;AAGE,IAAA,SAAS,EAAEO,IAAI,CAACJ,SAHlB;AAKE,IAAA,mBAAmB,EAAEC;AALvB,KAIOG,IAAI,CAACL,EAJZ;AAAA;AAAA;AAAA;AAAA,UADe,CAAjB;AAYA,QAAMO,SAAS,GAAGD,QAAQ,CAACE,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AACA,QAAMC,WAAW,GAAI,GAAEH,QAAQ,CAACE,MAAO,IAAGD,SAAU,YAApD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEV;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAI,MAAA,EAAE,EAAC,cAAP;AAAA,gBACGY;AADH;AAAA;AAAA;AAAA;AAAA,YARF,eAWE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,uCAFZ;AAGE,yBAAgB,cAHlB;AAAA,gBAKGH;AALH;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAvDQb,G;;KAAAA,G;AAyDT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"./component/Form\";\nimport FilterButton from \"./component/FilterButton\";\nimport Todo from \"./component/Todo\";\nimport { nanoid } from \"nanoid\";\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks.map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      \n    />\n  )\n  );\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}