{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\todomatic\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport FilterButton from \"./component/FilterButton\";\nimport Form from \"./component/Form\";\nimport Todo from \"./component/Todo\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  var _props$tasks;\n\n  const [tasksList, setTasks] = useState(props.task);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = (_props$tasks = props.tasks) === null || _props$tasks === void 0 ? void 0 : _props$tasks.map(tasks => /*#__PURE__*/_jsxDEV(Todo, {\n    id: tasks.id,\n    name: tasks.name,\n    completed: tasks.completed,\n    toggleTaskCompleted: toggleTaskCompleted\n  }, tasks.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 46\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: [/*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Gayrewtz71Jz1oVXDK/Dv59LbPE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/React/todomatic/src/App.js"],"names":["React","useState","FilterButton","Form","Todo","nanoid","App","props","tasksList","setTasks","task","toggleTaskCompleted","id","updatedTasks","tasks","map","completed","taskList","name","tasksNoun","length","headingText","addTask","newTask"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAAQC,MAAR,QAAqB,QAArB;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAElB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBR,QAAQ,CAACM,KAAK,CAACG,IAAP,CAAtC;;AAEA,WAASC,mBAAT,CAA6BC,EAA7B,EAAiC;AAC/B,UAAMC,YAAY,GAAGC,KAAK,CAACC,GAAN,CAAUL,IAAI,IAAI;AACrC;AACA,UAAIE,EAAE,KAAKF,IAAI,CAACE,EAAhB,EAAoB;AAClB;AACA;AACA,eAAO,EAAC,GAAGF,IAAJ;AAAUM,UAAAA,SAAS,EAAE,CAACN,IAAI,CAACM;AAA3B,SAAP;AACD;;AACD,aAAON,IAAP;AACD,KARoB,CAArB;AASAD,IAAAA,QAAQ,CAACI,YAAD,CAAR;AACD;;AAGD,QAAMI,QAAQ,mBAAGV,KAAK,CAACO,KAAT,iDAAG,aAAaC,GAAb,CAAiBD,KAAK,iBAAI,QAAC,IAAD;AACzC,IAAA,EAAE,EAAEA,KAAK,CAACF,EAD+B;AAEzC,IAAA,IAAI,EAAEE,KAAK,CAACI,IAF6B;AAGzC,IAAA,SAAS,EAAEJ,KAAK,CAACE,SAHwB;AAKzC,IAAA,mBAAmB,EAAEL;AALoB,KAIpCG,KAAK,CAACF,EAJ8B;AAAA;AAAA;AAAA;AAAA,UAA1B,CAAjB;AAQA,QAAMO,SAAS,GAAGF,QAAQ,CAACG,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AACA,QAAMC,WAAW,GAAI,GAAEJ,QAAQ,CAACG,MAAO,IAAGD,SAAU,YAApD;;AAGA,WAASG,OAAT,CAAiBJ,IAAjB,EAAsB;AACpB,UAAMK,OAAO,GAAG;AAACX,MAAAA,EAAE,EAAE,UAAQP,MAAM,EAAnB;AAAuBa,MAAAA,IAAI,EAACA,IAA5B;AAAkCF,MAAAA,SAAS,EAAC;AAA5C,KAAhB;AACAP,IAAAA,QAAQ,CAAC,CAAC,GAAGK,KAAJ,EAAUS,OAAV,CAAD,CAAR;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAED;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAI,MAAA,EAAE,EAAC,cAAP;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA,YARF,eAWE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,uCAFZ;AAGE,yBAAgB,cAHlB;AAAA,gBAKGJ;AALH;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAxDQX,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport FilterButton from \"./component/FilterButton\";\nimport Form from \"./component/Form\";\nimport Todo from \"./component/Todo\";\nimport {nanoid} from \"nanoid\";\n\nfunction App(props) {\n\n  const [tasksList, setTasks] = useState(props.task) \n  \n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  \n\n  const taskList = props.tasks?.map(tasks => <Todo\n    id={tasks.id}\n    name={tasks.name}\n    completed={tasks.completed}\n    key={tasks.id}\n    toggleTaskCompleted={toggleTaskCompleted}\n  />)\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n\n  function addTask(name){\n    const newTask = {id: \"todo-\"+nanoid(), name:name, completed:false}\n    setTasks([...tasks,newTask])\n  }\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}