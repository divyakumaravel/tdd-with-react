{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\todomatic\\\\src\\\\component\\\\Todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todo(props) {\n  _s();\n\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"stack-small\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: [\"New name for \", props.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        className: \"todo-text\",\n        type: \"text\",\n        onChange: handleChange,\n        ref: editFieldRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn todo-cancel\",\n        onClick: () => setEditing(false),\n        ref: editButtonRef,\n        children: [\"Cancel\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"renaming \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn__primary todo-edit\",\n        children: [\"Save\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"new name for \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n\n  const viewTemplate = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stack-small\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-cb\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        type: \"checkbox\",\n        defaultChecked: props.completed,\n        onChange: () => props.toggleTaskCompleted(props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => setEditing(true),\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn__danger\",\n        onClick: () => props.deleteTask(props.id),\n        children: [\"Delete \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this); // return (\n  //     <li className=\"todo stack-small\">\n  //         <div className=\"c-cb\">\n  //             <input\n  //                 id={props.id}\n  //                 type=\"checkbox\"\n  //                 defaultChecked={props.completed}\n  //                 onChange={() => props.toggleTaskCompleted(props.id)}\n  //             />\n  //             <label className=\"todo-label\" htmlFor={props.id}>\n  //                 {props.name}\n  //             </label>\n  //         </div>\n  //         <div className=\"btn-group\">\n  //             <button type=\"button\" className=\"btn\">\n  //                 Edit <span className=\"visually-hidden\">{props.name}</span>\n  //             </button>\n  //             <button\n  //                 type=\"button\"\n  //                 className=\"btn btn__danger\"\n  //                 onClick={() => props.deleteTask(props.id)}\n  //             >\n  //                 Delete <span className=\"visually-hidden\">{props.name}</span>\n  //             </button>\n  //         </div>\n  //     </li>\n  // );\n\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todo\",\n    children: isEditing ? editingTemplate : viewTemplate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Todo, \"hJUOsxBnPhi8fKCAbG0siV3/7bY=\");\n\n_c = Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["D:/React/todomatic/src/component/Todo.js"],"names":["React","useRef","useState","useEffect","Todo","props","isEditing","setEditing","newName","setNewName","editFieldRef","editButtonRef","handleSubmit","e","preventDefault","editTask","id","editingTemplate","name","handleChange","viewTemplate","completed","toggleTaskCompleted","deleteTask"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nexport default function Todo(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef = useRef(null);\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    New name for {props.name}\r\n                </label>\r\n                <input\r\n                    id={props.id}\r\n                    className=\"todo-text\"\r\n                    type=\"text\"\r\n                    onChange={handleChange}\r\n                    ref={editFieldRef}\r\n                />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn todo-cancel\"\r\n                    onClick={() => setEditing(false)}\r\n                    ref={editButtonRef}\r\n                >\r\n                    Cancel\r\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n                    Save\r\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                    id={props.id}\r\n                    type=\"checkbox\"\r\n                    defaultChecked={props.completed}\r\n                    onChange={() => props.toggleTaskCompleted(props.id)}\r\n                />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn__danger\"\r\n                    onClick={() => props.deleteTask(props.id)}\r\n                >\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // return (\r\n    //     <li className=\"todo stack-small\">\r\n    //         <div className=\"c-cb\">\r\n    //             <input\r\n    //                 id={props.id}\r\n    //                 type=\"checkbox\"\r\n    //                 defaultChecked={props.completed}\r\n    //                 onChange={() => props.toggleTaskCompleted(props.id)}\r\n    //             />\r\n    //             <label className=\"todo-label\" htmlFor={props.id}>\r\n    //                 {props.name}\r\n    //             </label>\r\n    //         </div>\r\n    //         <div className=\"btn-group\">\r\n    //             <button type=\"button\" className=\"btn\">\r\n    //                 Edit <span className=\"visually-hidden\">{props.name}</span>\r\n    //             </button>\r\n    //             <button\r\n    //                 type=\"button\"\r\n    //                 className=\"btn btn__danger\"\r\n    //                 onClick={() => props.deleteTask(props.id)}\r\n    //             >\r\n    //                 Delete <span className=\"visually-hidden\">{props.name}</span>\r\n    //             </button>\r\n    //         </div>\r\n    //     </li>\r\n    // );\r\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}