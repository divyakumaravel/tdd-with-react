{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\todomatic\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Form from \"./component/Form\";\nimport FilterButton from \"./component/FilterButton\";\nimport Todo from \"./component/Todo\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DATA = [{\n  id: \"todo-0\",\n  name: \"Eat\",\n  completed: true\n}, {\n  id: \"todo-1\",\n  name: \"Sleep\",\n  completed: false\n}, {\n  id: \"todo-2\",\n  name: \"Repeat\",\n  completed: false\n}];\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = DATA.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = DATA.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = DATA.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["D:/React/todomatic/src/App.js"],"names":["React","useState","Form","FilterButton","Todo","nanoid","DATA","id","name","completed","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","addTask","newTask","toggleTaskCompleted","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","taskList","filterList","tasksNoun","length","headingText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"./component/Form\";\nimport FilterButton from \"./component/FilterButton\";\nimport Todo from \"./component/Todo\";\nimport { nanoid } from \"nanoid\";\n\nconst DATA = [\n  {id: \"todo-0\", name: \"Eat\", completed: true},\n  {id: \"todo-1\", name: \"Sleep\", completed: false},\n  {id: \"todo-2\", name: \"Repeat\", completed: false}\n]\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = DATA.map(task => {\n      if (id === task.id) {\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = DATA.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task, name: newName }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = DATA\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}